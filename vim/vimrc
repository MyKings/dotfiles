"一些特殊配置项(非set)
"{{{

"语法高亮
if has("syntax")
  syntax on
endif


"开启类型插件支持(pyflakes)
filetype on
filetype plugin on

if has("autocmd")
  filetype plugin indent on
endif



"配色方案
syntax enable
"set background=dark
colorscheme hcdarkblue
"colorscheme solarized


"}}}

"大多数SET
"{{{



" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
"set showcmd		" Show (partial) command in status line.
"set showmatch		" Show matching brackets.
"set ignorecase		" Do case insensitive matching
"set smartcase		" Do smart case matching
"set incsearch		" Incremental search
"set autowrite		" Automatically save before commands like :next and :make
"set hidden             " Hide buffers when they are abandoned


"智能提示自动关闭
set completeopt=longest,menu



"禁止生成临时文件
set nobackup
set noswapfile


" 高亮列  hi colorcolumn
autocmd FileType python,c set colorcolumn=76


set nocp        "设置为扩展模式
set laststatus=2 "显示状态栏

"关于折叠
set foldenable
set foldmethod=marker

"set foldmethod=indent
"set foldmethod=manual


" Tab切换成4个空格
set tabstop=4
autocmd FileType  html,javascript,css,yaml set tabstop=2

"Tab转换为空格 公司fix
"set expandtab
autocmd FileType  make set noexpandtab

" C语言自动缩进4空格
set shiftwidth=4
autocmd FileType  html,javascript,css,yaml set shiftwidth=2

" 自动缩进
set autoindent

" 高亮当前行
"set cursorline

" 选中的文本高亮
set hlsearch

" encoding
set encoding=utf-8
set termencoding=utf-8
if has('win32')
    set fileencoding=chinese
else
    set fileencoding=utf-8
endif
set fileencodings=utf-8,ucs-bom,cp936,gb18030,big5,euc-jp,euc-kr,latin1
" language messages zh_cn.utf-8


"显示行号
set number
"ctags 设置
"set tags=/usr/bin/ctags "/usr/local/bin/exctags


"设置空格核缩进的提示
set list
set listchars=tab:\|-,trail:=,extends:>,precedes:<


"启动时不显示提示
set shortmess=atI

"}}}

"一些MAP 和插件配置
"{{{

map gb :TagbarToggle<CR>
let g:tagbar_width = 30


"autocmd FileType javascript nnoremap gc :JSHint %<CR>
"autocmd FileType python let g:pep8_map='gc'
"autocmd FileType python let g:tagbar_width = 90




"配置NERDTREE
let NERDChristmasTree=1 "装饰窗体!
let NERDTreeHighlightCursorline=1 "高亮选中行
let NERDTreeQuitOnOpen=1 "打开文件后自动关闭树
let NERDTreeWinPos='left'  "显示的窗体位置
nnoremap gt :NERDTreeToggle<cr>  "设置映射键位



let g:neocomplcache_enable_at_startup = 1
let g:neocomplcache_enable_underbar_completion = 1

" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: "\<TAB>"

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif



nnoremap to :tabnew<CR>
nnoremap tn :tabnext<CR>
nnoremap tp :tabprev<CR>


function AddPYH()
    call setline(1, "#!/usr/bin/env python")
    call append(1, "# coding: UTF-8")
    call append(2, "\"\"\" Module Description: ")
    call append(3, "")
    call append(4, "\"\"\"")
    call append(5, "")
    call append(6, "__date__ = \"" . strftime('%Y-%m-%d', localtime()) ."\"")
    call append(7, "")
    call append(8, "")
    call append(9, "if __name__ == \"__main__\":")
    call append(10, "    pass")
    normal gg
    normal j
    normal j
    normal j
endf


autocmd FileType python nnoremap gd :call append(line("."),'__import__("pdb").set_trace()')<CR>
autocmd FileType python nnoremap gp :call append(line("."),'__import__("pprint").pprint(None)')<CR>

autocmd FileType javascript nnoremap gu :call append(line("."),'"use strict";')<CR>
autocmd FileType javascript nnoremap gd :call append(line("."),'debugger;')<CR>
autocmd FileType javascript nnoremap gp :call append(line("."),'console.dir(1);')<CR>

"autocmd bufnewfile *.py call AddPYH()


"用空格键 莱开关折叠
"nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>


"                                                       寒晨<chen1324@gmail.com>
